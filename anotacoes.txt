- multiplicação O(n²)
    - pega um de baixo e multiplica por todos de cima


- para concatenar 1234 e 5678 sem usar strings, multiplicamos o 1234 por 10 elevado ao tamanho do 5678 = 4
    - fica 12340000
    - somamos o 5678
    - fica 12345678

- para binarios, usaremos o shift
    - a fórmula fica a1 << + a2

- para multiplicar dois vetores que foram cortados ao meio, fariamos isso:
    - A * B = (a1 << + a2) * (b1 << + b2) = a1b1 << << + a1b2 << + a2b1 << + a2b2
    - fazemos isso recursivamente para os 4 problemas, cada problema tem metade do tamanho
        - se um problema tem tamanho 64, cada problema tem metade desse tamanho: 64 -> 32 -> 16 -> 8 -> 4 -> 2 -> 1
    - usamos os mesmos O(n²) -> não ganhamos nada com a operação


- temos um melhor jeito de fazer isso:
(a1 + a2) * (b1 + b2) = a1b1 + (a2b1 + a1b2) + a2b2 

- como?
calculo (a1 + a2) * (b1 + b2)
como já tenho a1b1 e a2b2, vou subtrair do resultado acima para saber (a2b1 + a1b2)


- vamos fazer um exemplo:
A = 76
B = 84

76 * 84?

a1 = 7
a2 = 6
b1 = 8
b2 = 4

Então ficaríamos com 3 ramos:
a1b1 = 7 * 8
(a1 + a2) * (b1 + b2) = 13 * 12 -> esse é o ramo do meio
a2b2 = 6 * 4

Então multiplicamos o ramo da esquerda com dois shifts (7 * 8 * 100), somamos com o ramo do meio (13 * 12), subtraímos pelo ramo da esquerda e da direita (- 56 - 24), damos o shift multiplicando por 10 e somamos o ramo da direita (24)
Ficamos com essa expressão:
56000 + (156 - 56 - 24) * 10 + 24

fazemos isso recursivamente para o ramo do meio
então teremos:
a1b1 = 1 * 1 
(a1 + a2) * (b1 + b2) = 4 * 3
a2b2 = 3 * 2

Então multiplicamos o ramo da esquerda com dois shifts (1 * 1 * 100), somamos com o ramo do meio (4 * 3), subtraímos pelo ramo da esquerda e da direita (- 1 - 6), damos o shift multiplicando por 10 e somamos o ramo da direita (6)
Ficamos com essa expressão:
100 + (12 - 1 - 6) * 10 + 6

Paramos com as ramificações até o ramo do meio ter valores com apenas 1 casa decimal. 
Por que? 
O algoritmo de Karatsuba usa a recursão para fazer multiplicação apenas com valores de 1 casa decimas. Como vamos utilizar binário, as operações serão bit a bit



